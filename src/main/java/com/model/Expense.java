package com.model;

import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDateTime;

/**
 * Expense model class representing expense records in the database
 * 
 * FLOW DETAILED EXPLANATION:
 * 1. GUI form -> user enters expense data -> creates Expense object
 * 2. DAO.createExpense() -> saves Expense to database -> returns generated ID
 * 3. DAO.getAllExpenses() -> retrieves expenses from database -> creates Expense objects
 * 4. GUI displays expenses -> user can view, edit, delete expenses
 * 5. Database operations -> Expense objects converted to SQL operations
 * 
 * WHY THIS DESIGN:
 * - Multiple constructors: Handle different data sources (GUI, database, updates)
 * - LocalDateTime: Modern Java time API for better date/time handling
 * - PaymentMethod enum: Type-safe payment method selection
 * - Database mapping: Fields match database table columns exactly
 */
public class Expense {
    // Primary key from database - auto-generated by MySQL
    // WHY: Unique identifier for each expense in database
    // HOW: Set by database when expense is inserted, used for updates/deletes
    private int expense_id;
    
    // Foreign key to categories table
    // WHY: Links expense to a specific category
    // HOW: References categories.category_id, used in JOIN operations
    private int category_id;
    
    // Payment method enum (CASH or BANK_ACCOUNT)
    // WHY: Type-safe payment method selection
    // HOW: Enum prevents invalid values, stored as string in database
    private PaymentMethod paymentMethod;
    
    // Expense amount in currency units
    // WHY: Core expense data - how much was spent
    // HOW: Stored as decimal in database, converted to int for simplicity
    private int amount;
    
    // Expense description - additional details
    // WHY: Provides context about what the expense was for
    // HOW: Displayed in GUI forms and tables for user reference
    private String description;
    
    // When the expense occurred
    // WHY: Tracks when the expense happened (not when it was recorded)
    // HOW: Used for reporting and filtering by date
    private LocalDateTime expense_date;
    
    // When the expense record was created in the system
    // WHY: Audit trail - when was this expense added to the system
    // HOW: Set automatically when expense is created, used for sorting
    private LocalDateTime created_at;

    /**
     * Constructor for creating Expense objects from database Date objects
     * 
     * INVOCATION FLOW:
     * 1. DAO.getExpenseRow() -> creates Expense from database ResultSet
     * 2. Database retrieval -> Date objects converted to LocalDateTime
     * 3. GUI display -> Expense objects shown in tables and forms
     * 
     * WHY THIS CONSTRUCTOR:
     * - Database compatibility: Handles java.sql.Date from database
     * - Date conversion: Converts Date to LocalDateTime for modern Java API
     * - String parsing: Handles amount and payment method as strings from database
     * 
     * WHAT HAPPENS IN BACKGROUND:
     * - Date objects converted to LocalDateTime using toLocalDate().atStartOfDay()
     * - PaymentMethod enum created from string using valueOf()
     * - Amount string parsed to integer
     * - Object created with all converted values
     * 
     * @param expenseId Primary key from database
     * @param categoryId Foreign key to categories table
     * @param paymentMethod Payment method as string (converted to enum)
     * @param amount Expense amount as string (parsed to int)
     * @param description Expense description
     * @param expenseDate When expense occurred (converted to LocalDateTime)
     * @param createsAt When record was created (converted to LocalDateTime)
     */
    public Expense(int expenseId, int categoryId, String paymentMethod, String amount, String description, Date expenseDate, Date createsAt) {
        this.expense_id = expenseId; // Set primary key
        this.category_id = categoryId; // Set foreign key
        this.paymentMethod = PaymentMethod.valueOf(paymentMethod); // Convert string to enum
        this.amount = Integer.parseInt(amount); // Parse string to int
        this.description = description; // Set description
        this.expense_date = expenseDate.toLocalDate().atStartOfDay(); // Convert Date to LocalDateTime
        this.created_at = createsAt.toLocalDate().atStartOfDay(); // Convert Date to LocalDateTime
    }

    /**
     * Constructor for creating Expense objects from GUI forms
     * 
     * INVOCATION FLOW:
     * 1. GUI form submission -> user enters expense data
     * 2. Form validation -> ensures all required fields are provided
     * 3. Expense object creation -> data packaged for database operations
     * 4. DAO operations -> Expense object passed to database methods
     * 
     * WHY THIS CONSTRUCTOR:
     * - GUI compatibility: Handles data from GUI forms directly
     * - Type safety: PaymentMethod enum prevents invalid values
     * - Simplicity: Direct assignment of values without conversion
     * 
     * WHAT HAPPENS IN BACKGROUND:
     * - Values assigned directly from GUI form fields
     * - PaymentMethod enum used directly (type-safe)
     * - Amount as integer (no parsing needed)
     * - Object ready for database operations
     * 
     * @param expense_id Primary key (0 for new expenses)
     * @param category_id Foreign key to categories table
     * @param paymentMethod Payment method enum
     * @param amount Expense amount as integer
     */
    public Expense(int expense_id, int category_id, PaymentMethod paymentMethod, int amount) {
        this.expense_id = expense_id; // Set primary key
        this.category_id = category_id; // Set foreign key
        this.paymentMethod = paymentMethod; // Set payment method enum
        this.amount = amount; // Set amount
    }

    /**
     * Constructor for creating Expense objects from database Timestamp objects
     * 
     * INVOCATION FLOW:
     * 1. DAO.getExpenseRow() -> creates Expense from database ResultSet
     * 2. Database retrieval -> Timestamp objects converted to LocalDateTime
     * 3. GUI display -> Expense objects shown in tables and forms
     * 
     * WHY THIS CONSTRUCTOR:
     * - Database compatibility: Handles java.sql.Timestamp from database
     * - Timestamp conversion: Converts Timestamp to LocalDateTime for modern Java API
     * - String parsing: Handles amount and payment method as strings from database
     * 
     * WHAT HAPPENS IN BACKGROUND:
     * - Timestamp objects converted to LocalDateTime using toLocalDateTime()
     * - PaymentMethod enum created from string using valueOf()
     * - Amount string parsed to integer
     * - Object created with all converted values
     * 
     * @param expenseId Primary key from database
     * @param categoryId Foreign key to categories table
     * @param paymentMethod Payment method as string (converted to enum)
     * @param amount Expense amount as string (parsed to int)
     * @param description Expense description
     * @param expenseDate When expense occurred (converted to LocalDateTime)
     * @param createdAt When record was created (converted to LocalDateTime)
     */
    public Expense(int expenseId, int categoryId, String paymentMethod, String amount, String description, Timestamp expenseDate, Timestamp createdAt) {
        this.expense_id = expenseId; // Set primary key
        this.category_id = categoryId; // Set foreign key
        this.paymentMethod = PaymentMethod.valueOf(paymentMethod); // Convert string to enum
        this.amount = Integer.parseInt(amount); // Parse string to int
        this.description = description; // Set description
        this.expense_date = expenseDate.toLocalDateTime(); // Convert Timestamp to LocalDateTime
        this.created_at = createdAt.toLocalDateTime(); // Convert Timestamp to LocalDateTime
    }

    public int getExpense_id() {
        return expense_id;
    }

    public void setExpense_id(int expense_id) {
        this.expense_id = expense_id;
    }

    public int getCategory_id() {
        return category_id;
    }

    public void setCategory_id(int category_id) {
        this.category_id = category_id;
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public LocalDateTime getExpense_date() {
        return expense_date;
    }

    public void setExpense_date(LocalDateTime expense_date) {
        this.expense_date = expense_date;
    }

    public LocalDateTime getCreated_at() {
        return created_at;
    }

    public void setCreated_at(LocalDateTime created_at) {
        this.created_at = created_at;
    }
}
