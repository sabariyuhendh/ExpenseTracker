package com.model;

/**
 * Category model class representing expense categories in the database
 * 
 * FLOW DETAILED EXPLANATION:
 * 1. DAO creates Category objects from database ResultSet -> getCategoryRow()
 * 2. GUI uses Category objects in dropdowns -> displays category names
 * 3. User selects category -> Category object passed to expense creation
 * 4. Category ID used as foreign key in expenses table
 * 
 * WHY THIS DESIGN:
 * - Encapsulation: Private fields with public getters/setters
 * - Data Transfer Object: Carries data between GUI, DAO, and database
 * - Immutable-like: Once created, typically not modified (except for updates)
 * - Database mapping: Fields match database table columns exactly
 */
public class Category {
    // Primary key from database - auto-generated by MySQL
    // WHY: Unique identifier for each category in database
    // HOW: Set by database when category is inserted, used as foreign key in expenses
    private int categoryid;
    
    // Category name - displayed in GUI dropdowns
    // WHY: Human-readable identifier for users
    // HOW: Displayed in category selection dropdowns and tables
    private String categoryname;
    
    // Category description - additional details about the category
    // WHY: Provides context about what expenses belong in this category
    // HOW: Displayed in GUI forms and tables for user reference
    private String categorydescription;

    /**
     * Constructor for creating Category objects
     * 
     * INVOCATION FLOW:
     * 1. DAO.getCategoryRow() -> creates Category from database ResultSet
     * 2. GUI.loadCategoriesForExpense() -> creates Category objects for dropdown
     * 3. User selects category -> Category object used in expense creation
     * 4. Database operations -> Category ID used in SQL queries
     * 
     * WHY THIS CONSTRUCTOR:
     * - All parameters required: Ensures complete Category object creation
     * - ID parameter: Allows setting ID from database or for updates
     * - Direct assignment: Simple and efficient object creation
     * 
     * WHAT HAPPENS IN BACKGROUND:
     * - Object created in heap memory with provided values
     * - References stored in local variables or collections
     * - Used by GUI components for display and selection
     * 
     * @param id Primary key from database (0 for new categories)
     * @param categoryname Human-readable category name
     * @param categorydescription Additional details about the category
     */
    public Category(int id, String categoryname, String categorydescription) {
        this.categoryid = id; // Set the database primary key
        this.categoryname = categoryname; // Set the display name
        this.categorydescription = categorydescription; // Set the description
    }

    /**
     * Getter for category ID
     * 
     * INVOCATION FLOW:
     * 1. DAO methods -> need category ID for database operations
     * 2. GUI components -> need ID for foreign key relationships
     * 3. Database queries -> use ID in WHERE clauses and foreign keys
     * 
     * WHY GETTER:
     * - Encapsulation: Private field accessed through public method
     * - Data integrity: Read-only access to primary key
     * - Database operations: ID needed for updates, deletes, and foreign keys
     * 
     * @return Category ID from database
     */
    public int getCategoryid() {
        return categoryid;
    }

    /**
     * Getter for category name
     * 
     * INVOCATION FLOW:
     * 1. GUI dropdowns -> display category names to users
     * 2. Table rendering -> show category names in expense tables
     * 3. Form validation -> check if category name is provided
     * 
     * WHY GETTER:
     * - Display purposes: GUI needs to show category names
     * - User interaction: Users see and select by category name
     * - Data presentation: Tables and forms display category names
     * 
     * @return Category name for display
     */
    public String getCategoryname() {
        return categoryname;
    }

    /**
     * Setter for category name
     * 
     * INVOCATION FLOW:
     * 1. GUI forms -> user enters new category name
     * 2. Update operations -> modify existing category name
     * 3. Form validation -> ensure name is not empty
     * 
     * WHY SETTER:
     * - User input: GUI forms need to update category names
     * - Data modification: Allow changes to category information
     * - Form handling: GUI components need to set values
     * 
     * @param categoryname New category name to set
     */
    public void setCategoryname(String categoryname) {
        this.categoryname = categoryname;
    }

    /**
     * Getter for category description
     * 
     * INVOCATION FLOW:
     * 1. GUI forms -> display category description to users
     * 2. Table rendering -> show descriptions in category tables
     * 3. Form validation -> check if description is provided
     * 
     * WHY GETTER:
     * - Display purposes: GUI needs to show category descriptions
     * - User context: Provides additional information about categories
     * - Data presentation: Tables and forms display descriptions
     * 
     * @return Category description for display
     */
    public String getCategorydescription() {
        return categorydescription;
    }

    /**
     * Setter for category description
     * 
     * INVOCATION FLOW:
     * 1. GUI forms -> user enters new category description
     * 2. Update operations -> modify existing category description
     * 3. Form validation -> ensure description is not empty
     * 
     * WHY SETTER:
     * - User input: GUI forms need to update category descriptions
     * - Data modification: Allow changes to category information
     * - Form handling: GUI components need to set values
     * 
     * @param categorydescription New category description to set
     */
    public void setCategorydescription(String categorydescription) {
        this.categorydescription = categorydescription;
    }

    /**
     * Setter for category ID
     * 
     * INVOCATION FLOW:
     * 1. Database operations -> set ID after insert operations
     * 2. Update operations -> modify existing category ID
     * 3. Form handling -> set ID from database results
     * 
     * WHY SETTER:
     * - Database operations: ID set after successful insert
     * - Update operations: Allow changes to category ID
     * - Form handling: GUI components need to set ID values
     * 
     * @param categoryid New category ID to set
     */
    public void setCategoryid(int categoryid) {
        this.categoryid = categoryid;
    }
}

